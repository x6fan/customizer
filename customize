#! /usr/bin/env python
# Game Customizer

import os
import sys
import hashlib
import json

# Module root directory
root = os.path.abspath(os.path.dirname(__file__))

# Loads a JSON database of games supported by the customizer
def load_supported_games():
    with open(os.path.join(root, 'games.json')) as games:
        return json.load(games)

# Hashes a readable stream, uses SHA-1 by default
def hash(io, function = hashlib.sha1, block_size = 64 * 1024):
    hash = function()
    blocks = iter(lambda: io.read(block_size), b'')

    for block in blocks:
        hash.update(block)

    return hash.hexdigest()

# Returns the game's symbol if its customization is supported, None otherwise
def detect(game_image, supported_games):
    sha1 = hash(game_image)

    for game, metadata in supported_games.items():
        if metadata['sha1'] == sha1:
            return game

    return None

# Converts value to size bytes and writes them at offset
def patch(io, offset, value, size):
    data = value.to_bytes(size, byteorder = 'little')
    io.seek(offset)
    io.write(data)

def tweak_parts_allowed(image, offsets, sizes, tweaks):
    dicts = [offsets, tweaks, sizes]

    patch(image, *[d['normal'] for d in dicts])
    patch(image, *[d['limited'] for d in dicts])

def tweak_ranks(image, rank_offsets, rank_sizes, rank_tweaks):
    for rank, tweaks in rank_tweaks.items():
        offsets = rank_offsets[rank]

        if offsets['souls_required'] is not None:
            patch(image, *[d['souls_required'] for d in [offsets, tweaks, rank_sizes]])

        tweak_parts_allowed(image, *[d['parts_allowed'] for d in [offsets, rank_sizes, tweaks]])

def tweak_x6(image, data, tweaks):
    offsets = data['offsets']
    sizes = data['sizes']

    for category, function in { 'ranks': tweak_ranks }.items():
        if category in tweaks:
            function(image, *[d[category] for d in [offsets, sizes, tweaks]])

def main(x6_image_path, x6_data_path):
    x6_image = open(x6_image_path, 'r+b', buffering = 0)

    with x6_image:
        print('Verifying Mega Man X6 image: %s' % x6_image.name)

        if not verify(x6_image):
            print('Verification failed')
            return

        print('Verified: Mega Man X6 (USA) (v1.1)')

        with open(x6_data_path, 'r') as json_file:
            print('Loading X6 data: %s' % json_file.name)

            x6_data = json.load(json_file)

        x6_tweaks = json.load(sys.stdin)

        tweak_x6(x6_image, x6_data, x6_tweaks)

if __name__ == '__main__':
    x6_image_path = os.path.abspath(sys.argv[1])
    x6_data_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'x6_data.json'))

    main(x6_image_path, x6_data_path)
