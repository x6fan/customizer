#! /usr/bin/env python
# Game Customizer

import os
import sys
import hashlib
import json

# Module root directory
root = os.path.abspath(os.path.dirname(__file__))

# Load JSON data located at path
def load_json(path):
    with open(path) as data:
        return json.load(data)

# Loads a JSON database of games supported by the customizer
def load_supported_games():
    return load_json(os.path.join(root, 'games.json'))

# Games supported by this customization tool
supported_games = load_supported_games()

# Loads customization data for the specified game
def load_customization_data_for(game):
    return load_json(os.path.join(root, 'games', game + '.json'))

# Hashes a readable stream, uses SHA-1 by default
def hash(io, function = hashlib.sha1, block_size = 64 * 1024):
    hash = function()
    blocks = iter(lambda: io.read(block_size), b'')

    for block in blocks:
        hash.update(block)

    return hash.hexdigest()

# Returns the game's symbol if its customization is supported, None otherwise
def detect(game_image):
    sha1 = hash(game_image)

    for game, metadata in supported_games.items():
        if metadata['sha1'] == sha1:
            return game

    return None

# Converts value to size bytes and writes them at offset
def patch(io, offset, value, size, endianness):
    data = value.to_bytes(size, byteorder = endianness)
    io.seek(offset)
    io.write(data)

# Applies the custom value according to the given customization parameters
def apply_customization(game_image, value, parameters):
    patch(
        game_image,
        parameters['offset'],
        value,
        parameters['size'],
        parameters['endianness']
    )

# Determines whether the given value is a customization parameters dictionary
def is_customization_parameters(value):
    return (type(value) is dict) and ('offset' in value) and ('size' in value) and ('endianness' in value)

def main(x6_image_path, x6_data_path):
    x6_image = open(x6_image_path, 'r+b', buffering = 0)

    with x6_image:
        print('Verifying Mega Man X6 image: %s' % x6_image.name)

        if not verify(x6_image):
            print('Verification failed')
            return

        print('Verified: Mega Man X6 (USA) (v1.1)')

        with open(x6_data_path, 'r') as json_file:
            print('Loading X6 data: %s' % json_file.name)

            x6_data = json.load(json_file)

        x6_tweaks = json.load(sys.stdin)

        tweak_x6(x6_image, x6_data, x6_tweaks)

if __name__ == '__main__':
    x6_image_path = os.path.abspath(sys.argv[1])
    x6_data_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'x6_data.json'))

    main(x6_image_path, x6_data_path)
